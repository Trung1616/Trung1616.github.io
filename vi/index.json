[
{
	"uri": "http://Trung1616.github.io/vi/",
	"title": "Tổng quan",
	"tags": [],
	"description": "",
	"content": "Xây dựng ứng dụng chuyển văn bản thành giọng nói không có máy chủ với Amazon Polly Tổng thể Trong hội thảo này, bạn sẽ xây dựng một ứng dụng không có máy chủ trên AWS để chuyển đổi bài đăng thành tệp MP3 và cung cấp dịch vụ web RESTful để gửi và truy xuất thông tin bài đăng qua Amazon API Gateway.\nNội dung Giới thiệu Các bước chuẩn bị Các bước thực hiện Kết luận hội thảo Dọn dẹp tài nguyên Hướng mở rộng trong tương lai và tài liệu tham khảo "
},
{
	"uri": "http://Trung1616.github.io/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Đến cuối buổi hội thảo này, bạn sẽ có thể:\nTạo bảng Amazon DynamoDB để lưu trữ dữ liệu Tạo một API RESTful của Amazon API Gateway Tạo các hàm AWS Lambda được kích hoạt bởi API Gateway Kết nối các chức năng AWS Lambda với Amazon Simple Notification Service (SNS) Sử dụng Amazon Polly để tổng hợp giọng nói bằng nhiều ngôn ngữ và giọng nói khác nhau Khi tham gia hội thảo này, bạn sẽ xây dựng một ứng dụng không có máy chủ, nghĩa là bạn không cần phải làm việc với máy chủ — không cần cung cấp, không cần vá lỗi, không cần mở rộng quy mô. AWS Cloud sẽ tự động xử lý việc này, cho phép bạn tập trung vào ứng dụng của mình.\nỨng dụng cung cấp hai phương pháp – một để gửi thông tin về bài đăng mới, cần được chuyển đổi thành tệp MP3 và một để truy xuất thông tin về bài đăng (bao gồm liên kết đến tệp MP3 được lưu trữ trong thùng Amazon S3). Cả hai phương pháp đều được hiển thị dưới dạng dịch vụ web RESTful thông qua Amazon API Gateway.\nKhi ứng dụng gửi thông tin về bài đăng mới:\nThông tin được nhận bởi dịch vụ web RESTful được Amazon API Gateway tiếp xúc. Dịch vụ web này được gọi bởi một trang web tĩnh được lưu trữ trên Amazon Simple Storage Service (Amazon S3). Amazon API Gateway kích hoạt hàm AWS Lambda, New Post, có nhiệm vụ khởi tạo quy trình tạo tệp MP3. Hàm Lambda chèn thông tin về bài đăng vào bảng Amazon DynamoDB, nơi lưu trữ thông tin về tất cả các bài đăng. Để chạy toàn bộ quy trình một cách không đồng bộ, bạn sử dụng Amazon Simple Notification Service (Amazon SNS) để tách quá trình tiếp nhận thông tin về bài đăng mới và bắt đầu chuyển đổi âm thanh của chúng. Một chức năng Lambda khác, Chuyển đổi thành Âm thanh, được đăng ký theo chủ đề SNS của bạn và được kích hoạt bất cứ khi nào có tin nhắn mới xuất hiện (có nghĩa là bài đăng mới sẽ được chuyển đổi thành tệp âm thanh). Chức năng Chuyển đổi sang âm thanh Lambda sử dụng Amazon Polly để chuyển đổi văn bản thành tệp âm thanh theo ngôn ngữ đã chỉ định (cùng ngôn ngữ với ngôn ngữ của văn bản). Tệp MP3 mới được lưu trong thùng S3 chuyên dụng. Thông tin về bài đăng được cập nhật trong bảng DynamoDB. URL đến tệp âm thanh được lưu trữ trong thùng S3 được lưu cùng với dữ liệu đã lưu trữ trước đó. Khi ứng dụng lấy thông tin về bài đăng:\nDịch vụ web RESTful được triển khai bằng Amazon API Gateway. Amazon API Gateway cung cấp phương pháp để truy xuất thông tin về bài đăng. Các phương pháp này chứa văn bản của bài đăng và liên kết đến thùng S3 nơi lưu trữ tệp MP3. Dịch vụ web được gọi bằng trang web tĩnh được lưu trữ trên Amazon S3. Amazon API Gateway gọi hàm Get Post Lambda, triển khai logic để truy xuất dữ liệu bài đăng. Hàm Get Post Lambda sẽ truy xuất thông tin về bài đăng (bao gồm tham chiếu đến Amazon S3) từ bảng DynamoDB và trả về thông tin. Giới thiệu về các công cụ và dịch vụ được sử dụng trong Hội thảo Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. It allows developers to store and retrieve any amount of data and serve any level of request traffic. It is widely used for applications that need high availability and low-latency access to data. Amazon API Gateway là dịch vụ tính toán không máy chủ cho phép bạn chạy mã mà không cần quản lý hoặc cung cấp máy chủ. Bạn có thể kích hoạt các hàm Lambda dựa trên các sự kiện khác nhau, chẳng hạn như thay đổi dữ liệu hoặc yêu cầu HTTP, và chỉ trả tiền cho thời gian tính toán mà bạn sử dụng. AWS Lambda là dịch vụ tính toán không máy chủ cho phép bạn chạy mã mà không cần quản lý hoặc cung cấp máy chủ. Bạn có thể kích hoạt các hàm Lambda dựa trên các sự kiện khác nhau, chẳng hạn như thay đổi dữ liệu hoặc yêu cầu HTTP, và chỉ trả tiền cho thời gian tính toán mà bạn sử dụng. Amazon SNS là một dịch vụ nhắn tin được quản lý toàn diện để gửi thông báo từ đám mây. Nó hỗ trợ nhiều định dạng khác nhau, bao gồm tin nhắn văn bản (SMS), email và thông báo đẩy trên thiết bị di động. SNS thường được sử dụng để thông báo cho người đăng ký về các sự kiện quan trọng theo thời gian thực. Amazon Polly là một dịch vụ đám mây chuyển đổi văn bản thành giọng nói tự nhiên bằng cách sử dụng các công nghệ học sâu tiên tiến. Nó hỗ trợ nhiều ngôn ngữ và loại giọng nói khác nhau, rất lý tưởng cho các ứng dụng như trợ lý giọng nói, chatbot và nhiều ứng dụng khác. "
},
{
	"uri": "http://Trung1616.github.io/vi/3-implementation-steps/3.1-create-a-dynamodb-table/",
	"title": "Tạo bảng DynamoDB",
	"tags": [],
	"description": "",
	"content": "Ứng dụng lưu trữ thông tin về các bài đăng trên blog, bao gồm văn bản và URL của tệp MP3, trong Amazon DynamoDB. Bạn bắt đầu bằng cách tạo một bảng bài đăng. Khóa chính (id) là một chuỗi, mà hàm New Post Lambda tạo ra khi các bản ghi mới (bài đăng) được chèn vào cơ sở dữ liệu.\nỞ đầu AWS Management Console, trên thanh tìm kiếm, hãy tìm kiếm và chọn DynamoDB. Chọn Create table Tạo một bảng DynamoDB mới với: Tên bảng: posts Khóa phân vùng: id (String) Cài đặt bảng: Default settings Chọn Create table. Bây giờ không cần phải xác định toàn bộ cấu trúc của bảng. Sau khi bạn hoàn tất thiết lập ứng dụng, nó sẽ lưu trữ thông tin sau trong bảng DynamoDB:\nid: ID của bài đăng. status: UPDATED hoặc PROCESSING, tùy thuộc vào việc tệp MP3 đã được tạo hay chưa. text: Văn bản của bài đăng mà tệp âm thanh đang được tạo. voice: Giọng nói của Amazon Polly được sử dụng để tạo tệp âm thanh. url: Liên kết đến thùng S3 nơi tệp âm thanh đang được lưu trữ. "
},
{
	"uri": "http://Trung1616.github.io/vi/5-cleanup/5.1-delete-amazon-sns/",
	"title": "Xóa Amazon SNS",
	"tags": [],
	"description": "",
	"content": "Bắt đầu bằng việc xóa chủ đề (topic) SNS. Vì các dịch vụ khác có thể gửi tin nhắn đến đây, việc xóa SNS trước sẽ đảm bảo không có vấn đề xảy ra sau đó.\nỞ đầu AWS Management Console, trong thanh tìm kiếm, hãy tìm kiếm và chọn Simple Notification Service (SNS) Trong ngăn điều hướng bên trái, chọn Topics.\nNhấn vào Topics new_posts Chọn Delete Nhập delete me vào ô xác nhận và chọn Delete để xóa. "
},
{
	"uri": "http://Trung1616.github.io/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Nếu bạn có quyền truy cập vào AWS Management Console với quyền quản trị, bạn có thể sử dụng tài khoản AWS của mình để bắt đầu hội thảo này.\nKhởi chạy ngăn xếp CloudFormartion Mẫu AWS CloudFormation được sử dụng để thiết lập tài nguyên phòng thí nghiệm trong Vùng AWS mà bạn chọn. Bước này là bắt buộc vì các hướng dẫn sau dựa trên các tài nguyên này. Mẫu CloudFormation cung cấp các tài nguyên sau:\nVai trò IAM. Bảng Amazon DynamoDB. Máy trạng thái chức năng bước AWS. Tải xuống mẫu CloudFormation:Tải xuống\nTải xuống (dự phòng)\nLưu tệp mẫu YAML vào một thư mục trên máy cục bộ của bạn.\nĐiều hướng đến CloudFormation trong AWS Management Console.\n4.\tTrên bảng điều khiển CloudFormation, chọn Upload a template file.\nChọn mẫu mà bạn vừa tải xuống, sau đó chọn Next. Đặt tên cho ngăn xếp, chẳng hạn như polly-serverless-stack\nĐối với Configure stack options, hãy giữ nguyên giá trị mặc định và chọn Next.\nIn Capabilities and transforms, acknowledge all.\nĐể triển khai mẫu, hãy chọn Submit.\nSau khi mẫu được triển khai, để xem lại các tài nguyên đã tạo, hãy điều hướng đến CloudFormation Resources, và sau đó chọn ngăn xếp CloudFormation mà bạn đã tạo. Việc triển khai Cloud Formation mất khoảng 1–2 phút để hoàn tất.\n"
},
{
	"uri": "http://Trung1616.github.io/vi/3-implementation-steps/3.2-create-an-amazon-s3-bucket/",
	"title": "Tạo Amazon S3 bucket",
	"tags": [],
	"description": "",
	"content": "Bạn cần tạo một Amazon S3 bucket để lưu trữ tất cả các tệp âm thanh do ứng dụng tạo ra. Bạn tạo một thùng có tên duy nhất, chẳng hạn như audioposts-123456789.\nỞ đầu AWS Management Console, trên thanh tìm kiếm, hãy tìm kiếm và chọn S3. Chọn Create bucket và cấu hình các chi tiết sau Tên bucket: audioposts-NUMBER Thay thế NUMBER bằng một số ngẫu nhiên Sao chép tên nhóm vào trình soạn thảo văn bản khi bạn sử dụng tên nhóm sau này. Trong Object Ownership, chọn ACLs enabled Trong Block Public Access settings for this bucket hãy bỏ tùy chọn Block all public access và sau đó chọn tất cả các deselected khác. Lưu ý tất cả các tùy chọn riêng lẻ vẫn được bỏ chọn. Khi bỏ chọn tất cả quyền truy cập công khai, sau đó bạn phải chọn các tùy chọn riêng lẻ áp dụng cho tình huống và mục tiêu bảo mật của mình. Trong môi trường sản xuất, nên sử dụng cài đặt ít cho phép nhất có thể.\nMột hộp cảnh báo xuất hiện nói rằng: Tắt chặn mọi quyền truy cập công khai có thể khiến thùng này và các đối tượng bên trong trở thành công khai. AWS khuyên bạn nên bật chặn mọi quyền truy cập công khai, trừ khi quyền truy cập công khai là bắt buộc đối với các trường hợp sử dụng cụ thể và đã xác minh như lưu trữ trang web tĩnh.\nChọn hộp kiểm bên cạnh I acknowledge that the current settings might result in this bucket and the objects within becoming public. Chọn Create bucket. Mỗi Amazon S3 bucket phải có một tên duy nhất.\nThận trọng: Nếu bạn nhận được lỗi có nội dung Tên thùng được yêu cầu không khả dụng, hãy chọn liên kết Chỉnh sửa ở trên cùng, đổi tên thùng và thử lại cho đến khi thành công. "
},
{
	"uri": "http://Trung1616.github.io/vi/5-cleanup/5.2-delete-lambda-functions/",
	"title": "Xóa Hàm Lambda",
	"tags": [],
	"description": "",
	"content": "Delete the three AWS Lambda functions (New Post, Get Post, and Convert to audio). These functions are typically closely tied to triggers and destinations, so it’s recommended to delete them after removing SNS.\nAt the top of the AWS Management Console, in the search bar, search for and select Lambda. In the left-hand navigation pane, select Functions.\nSelect all the Lambda functions related to the Workshop.\nClick Delete Type delete in the confirmation box and select Delete to confirm the deletion. "
},
{
	"uri": "http://Trung1616.github.io/vi/3-implementation-steps/",
	"title": "Các bước thực hiện",
	"tags": [],
	"description": "",
	"content": "Trong phòng thí nghiệm này, bạn sẽ thực hiện một loạt các bước để xây dựng một ứng dụng không có máy chủ trên AWS để chuyển đổi bài đăng thành tệp MP3 và cung cấp dịch vụ web RESTful để gửi và truy xuất thông tin bài đăng qua Amazon API Gateway.\nNội dung 3.1. Tạo bảng DynamoDB 3.2. Tạo Amazon S3 bucket 3.3. Tạo chủ đề SNS 3.4. Tạo bài viết mới Hàm Lambda 3.5. Tạo hàm Lambda chuyển đổi sang âm thanh 3.6. Kiểm tra các chức năng 3.7. Tạo hàm Lambda get post 3.8. Trình bày chức năng Lambda như một dịch vụ web RESTful 3.9. Tạo giao diện người dùng không có máy chủ\n"
},
{
	"uri": "http://Trung1616.github.io/vi/3-implementation-steps/3.3-create-an-sns-topic/",
	"title": "Tạo chủ đề SNS",
	"tags": [],
	"description": "",
	"content": "Như bạn có thể thấy trong sơ đồ kiến ​​trúc, logic chuyển đổi bài đăng (văn bản) thành tệp âm thanh được chia thành hai hàm AWS Lambda. Điều này được thực hiện vì một số lý do.\nĐầu tiên, nó cho phép ứng dụng sử dụng các lệnh gọi không đồng bộ để người dùng gửi bài đăng mới đến ứng dụng ngay lập tức nhận được ID của mục DynamoDB mới, do đó, ứng dụng biết phải yêu cầu gì sau đó mà không cần phải đợi quá trình chuyển đổi hoàn tất. Với các bài đăng nhỏ, quá trình chuyển đổi thành tệp âm thanh có thể mất vài mili giây, nhưng với các bài đăng lớn hơn (100.000 từ trở lên), quá trình chuyển đổi văn bản có thể mất nhiều thời gian hơn. Trong các trường hợp sử dụng khác, chẳng hạn như phát trực tuyến theo thời gian thực, kích thước không phải là vấn đề vì Amazon Polly bắt đầu phát trực tuyến giọng nói ngay khi có các byte đầu tiên.\nThứ hai, hệ thống sử dụng hàm Lambda để chuyển đổi bài đăng.\nVì quy trình đã được chia thành hai quy trình, cần phải có cách để tích hợp chúng lại với nhau. Bạn sử dụng Amazon SNS để gửi tin nhắn về bài đăng mới từ chức năng đầu tiên đến chức năng thứ hai.\nỞ đầu AWS Management Console, trong thanh tìm kiếm, hãy tìm kiếm và chọn Simple Notification Service (SNS) Trong ngăn điều hướng bên trái, chọn Topics. Lưu ý: Bạn có thể cần mở rộng ngăn điều hướng bằng cách chọn biểu tượng menu.\nChọn Create topic và cấu hình các thông tin chi tiết sau: Loại: chọn Standard Tên: new_posts Tên hiển thị: New Posts Ở cuối trang, chọn Create topic. Sao chép Topic ARN và dán vào trình soạn thảo văn bản để sử dụng sau. Đầu ra dự kiến:\narn:aws:sns:ap-southeast-1:058264437089:new_posts Bạn cấu hình các hàm Lambda để sử dụng Topic ARN này sau trong phòng thí nghiệm.\n"
},
{
	"uri": "http://Trung1616.github.io/vi/5-cleanup/5.3-delete-amazon-dynamodb/",
	"title": "Xóa Amazon DynamoDB",
	"tags": [],
	"description": "",
	"content": "Xóa bảng DynamoDB được sử dụng để lưu trữ bài đăng. Bạn có thể muốn sao lưu dữ liệu nếu cần trước khi xóa.\nỞ đầu AWS Management Console, trên thanh tìm kiếm, hãy tìm kiếm và chọn DynamoDB. Trong ngăn điều hướng bên trái, chọn Tables.\nChọn bảng posts\nChọn Delete Chọn Delete all CloudWatch alarms for post\nNhập comfirm vào hộp xác nhận và chọn Delete để xóa. "
},
{
	"uri": "http://Trung1616.github.io/vi/4-summary/",
	"title": "Kết luận hội thảo",
	"tags": [],
	"description": "",
	"content": "Kết luận Xây dựng ứng dụng chuyển văn bản thành giọng nói đa ngôn ngữ không cần máy chủ: Mở khóa những khả năng mới\nTrong dự án này, bạn đã hoàn thành thành công\nThiết lập bảng Amazon DynamoDB cho dữ liệu Đã tạo một RESTful API bằng cách sử dụng Amazon API Gateway Xây dựng các chức năng AWS Lambda, được kích hoạt liền mạch bởi API AWS Lambda tích hợp với Amazon Simple Notification Service (SNS) Tận dụng Amazon Polly để tạo ra giọng nói bằng nhiều ngôn ngữ và giọng nói Cuối cùng, bạn đã phát triển một ứng dụng hoàn toàn không cần máy chủ có khả năng chuyển đổi văn bản—chẳng hạn như bài đăng trên blog—thành lời nói, sử dụng nhiều giọng nói và ngôn ngữ. Mặc dù ví dụ này tập trung vào blog, giải pháp có thể dễ dàng được điều chỉnh cho nhiều trường hợp sử dụng khác nhau, chẳng hạn như chuyển đổi nội dung web thành giọng nói hoặc nhúng các tính năng giọng nói vào ứng dụng web.\nNhờ bản chất không cần máy chủ của AWS Lambda, Amazon API Gateway, Amazon S3 và DynamoDB, ứng dụng không yêu cầu bảo trì máy chủ, có tính khả dụng cao theo thiết kế và tự động mở rộng trên nhiều Vùng khả dụng.\nBây giờ, khả năng là vô tận. Cách tiếp cận này trao quyền cho bạn để đổi mới và xây dựng các ứng dụng mang lại trải nghiệm người dùng phong phú và hấp dẫn hơn bao giờ hết.\n"
},
{
	"uri": "http://Trung1616.github.io/vi/3-implementation-steps/3.4-creat-a-new-post-lambda-function/",
	"title": "Tạo hàm Lambda cho bài đăng mới",
	"tags": [],
	"description": "",
	"content": "Hàm Lambda đầu tiên bạn tạo là điểm vào cho ứng dụng. Nó nhận thông tin về các bài đăng mới cần được chuyển đổi thành tệp âm thanh.\nỞ đầu AWS Management Console, trên thanh tìm kiếm, hãy tìm kiếm và chọn Lambda. Chọn Create function. Chọn Author from scratch và sử dụng các cài đặt sau:\nFunction name: PostReader_NewPost Runtime: Python 3.12 Mở rộng Change default execution role Execution role: Chọn Use an existing role Existing role: Chọn Lab-Lambda-Role Chọn Create function. Lệnh: Xóa mã hiện tại và dán mã sau: import boto3 import os import uuid def lambda_handler(event, context): recordId = str(uuid.uuid4()) voice = event[\u0026#34;voice\u0026#34;] text = event[\u0026#34;text\u0026#34;] print(\u0026#39;Generating new DynamoDB record, with ID: \u0026#39; + recordId) print(\u0026#39;Input Text: \u0026#39; + text) print(\u0026#39;Selected voice: \u0026#39; + voice) # Creating new record in DynamoDB table dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) table.put_item( Item={ \u0026#39;id\u0026#39; : recordId, \u0026#39;text\u0026#39; : text, \u0026#39;voice\u0026#39; : voice, \u0026#39;status\u0026#39; : \u0026#39;PROCESSING\u0026#39; } ) # Sending notification about new post to SNS client = boto3.client(\u0026#39;sns\u0026#39;) client.publish( TopicArn = os.environ[\u0026#39;SNS_TOPIC\u0026#39;], Message = recordId ) return recordId Giải thích mã: Mã này là một hàm AWS Lambda được viết bằng Python. Mã này lấy dữ liệu đầu vào, bao gồm văn bản và giọng nói, từ sự kiện kích hoạt, sau đó lưu trữ thông tin này trong bảng DynamoDB với trạng thái ban đầu là “PROCESSING”. Sau khi lưu dữ liệu, hàm sẽ gửi thông báo qua dịch vụ SNS để thông báo rằng một bản ghi mới đã được tạo và cuối cùng trả về ID của bản ghi đã tạo. Mã này sử dụng thư viện boto3 để tương tác với các dịch vụ AWS.\nKiểm tra mã. Hàm Lambda thực hiện những điều sau:\nLấy hai tham số đầu vào: Voice: Một trong hàng chục giọng nói được Amazon Polly hỗ trợ Text: Văn bản của bài đăng mà chúng ta muốn chuyển đổi thành tệp âm thanh Tạo một bản ghi mới trong bảng DynamoDB với thông tin về bài đăng mới Xuất bản thông tin về bài đăng mới lên SNS (ID của mục/ID bài đăng DynamoDB được xuất bản ở đó dưới dạng tin nhắn) - Trả về ID của mục DynamoDB cho người dùng Chọn Deploy. Hàm Lambda cần biết tên của bảng DynamoDB và chủ đề SNS. Để cung cấp các giá trị này, bạn sử dụng các biến môi trường. Đây là một cách tuyệt vời để truyền thông tin đến một hàm mà không cần mã hóa cứng các giá trị vào chính hàm đó.\nChọn tab Configuration để cấu hình các biến môi trường. Trong ngăn điều hướng bên trái, chọn Environment variables. Trong phần Environment variables, chọn Edit. Chọn Add environment variable.\nKey: nhập SNS_TOPIC Value: Dán chủ đề SNS bạn đã sao chép trước đó vào phòng thí nghiệm Chọn Add environment variable.\nKey: Nhập DB_TABLE_NAME Value: Nhập posts Chọn Save. Trong ngăn điều hướng bên trái của tab Configuration, chọn General configuration.\nTrong phần General configuration, chọn Edit.\nCập nhật thời gian chờ lên 10 giây Chọn Save. Hàm Lambda New Post đã sẵn sàng! Bây giờ bạn có thể kiểm tra xem hàm có hoạt động không.\nChọn tab Test và cấu hình các thông tin chi tiết sau: Event name: Joanna Command: Xóa mã hiện tại và dán mã sau: { \u0026#34;voice\u0026#34;: \u0026#34;Joanna\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;This is working!\u0026#34; } Chọn Save.\nChọn Test để chạy sự kiện kiểm tra của bạn.\nBạn sẽ thấy thông báo: Execution result: succeeded (Kết quả thực hiện: thành công).\nBạn có thể mở rộng phần Details để xem nhật ký thực hiện.\nHàm New Post Lambda trả về một ID và bạn có thể thấy các giá trị đầu vào trong đầu ra Nhật ký.\n"
},
{
	"uri": "http://Trung1616.github.io/vi/5-cleanup/5.4-delete-amazon-s3-buckets/",
	"title": "Xóa Amazon S3 Buckets",
	"tags": [],
	"description": "",
	"content": "Xóa hai S3 buckets:\nMột là lưu trữ nội dung web tĩnh. Phần còn lại là lưu trữ các tập tin MP3 do Polly tạo ra. Hãy đảm bảo làm trống bucket chứa trước khi xóa.\nXóa bucket www-audioposts-thanhtrung\nỞ đầu AWS Management Console, trên thanh tìm kiếm, hãy tìm kiếm và chọn S3. Nhấp vào bucket www-audioposts-thanhtrung. Chọn tất cả các tệp trong thùng và chọn Delete Chọn bucket www-audioposts-thanhtrung và chọn Delete.\n5. Nhập www-audioposts-thanhtrung vào hộp xác nhận và chọn Delete bucket để xóa. Xóa bucket audioposts-21133090\nNhấp vào bucket audioposts-21133090. Chọn tất cả các tệp trong thùng và nhấn permanently delete trong hộp xác nhận và chọn Delete objects để xóa. Chọn bucket audioposts-21133090 và chọn Delete.\nNhập audioposts-21133090 vào hộp xác nhận và chọn Delete bucket để xóa. "
},
{
	"uri": "http://Trung1616.github.io/vi/5-cleanup/",
	"title": "Dọn dẹp tài nguyên  ",
	"tags": [],
	"description": "",
	"content": "Để dọn dẹp các tài nguyên sau khi hoàn thành Workshop, bạn có thể thực hiện theo các bước sau, tập trung vào việc xóa các tài nguyên tương ứng theo thứ tự chính xác. Ở đầu AWS Management Console, trong thanh tìm kiếm, hãy tìm kiếm và chọn các dịch vụ tương ứng cần dọn dẹp sau:\n5.1. Xóa Amazon SNS.\n5.2. Xóa Lambda Functions.\n5.3. Xóa Amazon DynamoDB.\n5.4. Xóa Amazon S3 Buckets.\n5.5. Xóa Amazon API Gateway.\n5.6. Xóa CloudFormation Stack.\n"
},
{
	"uri": "http://Trung1616.github.io/vi/3-implementation-steps/3.5-create-a-convert-to-audio-lambda-function/",
	"title": "Tạo hàm Lambda chuyển đổi sang âm thanh",
	"tags": [],
	"description": "",
	"content": "Bây giờ bạn tạo một hàm Lambda để chuyển đổi văn bản được lưu trữ trong bảng DynamoDB thành tệp âm thanh.\nChọn Functions ở ngăn điều hướng phía trên bên trái. Bạn có thể cần mở rộng ngăn điều hướng bằng cách chọn biểu tượng menu.\nChọn Create function. Chọn Author from scratch và sử dụng các cài đặt sau:\nFunction name: ConvertToAudio Runtime: Python 3.12 Mở rộng Change default execution role Execution role: chọn Use an existing role Existing role: chọn Lab-Lambda-Role Cuộn xuống và chọn Create function.\nLệnh Xóa mã hiện tại và dán mã sau: import boto3 import os from contextlib import closing from boto3.dynamodb.conditions import Key, Attr def lambda_handler(event, context): postId = event[\u0026#34;Records\u0026#34;][0][\u0026#34;Sns\u0026#34;][\u0026#34;Message\u0026#34;] print (\u0026#34;Text to Speech function. Post ID in DynamoDB: \u0026#34; + postId) # Retrieving information about the post from DynamoDB table dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) postItem = table.query( KeyConditionExpression=Key(\u0026#39;id\u0026#39;).eq(postId) ) text = postItem[\u0026#34;Items\u0026#34;][0][\u0026#34;text\u0026#34;] voice = postItem[\u0026#34;Items\u0026#34;][0][\u0026#34;voice\u0026#34;] rest = text # Because single invocation of the polly synthesize_speech api can # transform text with about 3000 characters, we are dividing the # post into blocks of approximately 2500 characters. textBlocks = [] while (len(rest) \u0026gt; 2600): begin = 0 end = rest.find(\u0026#34;.\u0026#34;, 2500) if (end == -1): end = rest.find(\u0026#34; \u0026#34;, 2500) textBlock = rest[begin:end] rest = rest[end:] textBlocks.append(textBlock) textBlocks.append(rest) # For each block, invoke Polly API, which transforms text into audio polly = boto3.client(\u0026#39;polly\u0026#39;) for textBlock in textBlocks: response = polly.synthesize_speech( OutputFormat=\u0026#39;mp3\u0026#39;, Text = textBlock, VoiceId = voice ) # Save the audio stream returned by Amazon Polly on Lambda\u0026#39;s temp # directory. If there are multiple text blocks, the audio stream # is combined into a single file. if \u0026#34;AudioStream\u0026#34; in response: with closing(response[\u0026#34;AudioStream\u0026#34;]) as stream: output = os.path.join(\u0026#34;/tmp/\u0026#34;, postId) if os.path.isfile(output): mode = \u0026#34;ab\u0026#34; # Append binary mode else: mode = \u0026#34;wb\u0026#34; # Write binary mode (create a new file) with open(output, mode) as file: file.write(stream.read()) s3 = boto3.client(\u0026#39;s3\u0026#39;) s3.upload_file(\u0026#39;/tmp/\u0026#39; + postId, os.environ[\u0026#39;BUCKET_NAME\u0026#39;], postId + \u0026#34;.mp3\u0026#34;) s3.put_object_acl(ACL=\u0026#39;public-read\u0026#39;, Bucket=os.environ[\u0026#39;BUCKET_NAME\u0026#39;], Key= postId + \u0026#34;.mp3\u0026#34;) location = s3.get_bucket_location(Bucket=os.environ[\u0026#39;BUCKET_NAME\u0026#39;]) region = location[\u0026#39;LocationConstraint\u0026#39;] if region is None: url_beginning = \u0026#34;https://s3.amazonaws.com/\u0026#34; else: url_beginning = \u0026#34;https://s3-\u0026#34; + str(region) + \u0026#34;.amazonaws.com/\u0026#34; url = url_beginning \\ + str(os.environ[\u0026#39;BUCKET_NAME\u0026#39;]) \\ + \u0026#34;/\u0026#34; \\ + str(postId) \\ + \u0026#34;.mp3\u0026#34; # Updating the item in DynamoDB response = table.update_item( Key={\u0026#39;id\u0026#39;:postId}, UpdateExpression= \u0026#34;SET #statusAtt = :statusValue, #urlAtt = :urlValue\u0026#34;, ExpressionAttributeValues= {\u0026#39;:statusValue\u0026#39;: \u0026#39;UPDATED\u0026#39;, \u0026#39;:urlValue\u0026#39;: url}, ExpressionAttributeNames= {\u0026#39;#statusAtt\u0026#39;: \u0026#39;status\u0026#39;, \u0026#39;#urlAtt\u0026#39;: \u0026#39;url\u0026#39;}, ) return Giải thích mã: Hàm AWS Lambda này chuyển đổi văn bản được lưu trữ trong bản ghi DynamoDB thành tệp âm thanh MP3 bằng Amazon Polly. Hàm này lấy ID văn bản và giọng nói từ DynamoDB bằng ID bài đăng từ tin nhắn SNS, sau đó chia văn bản thành các khối khoảng 2500 ký tự (vì API của Polly có giới hạn ký tự). Mỗi khối được Polly xử lý để tổng hợp giọng nói và âm thanh kết quả được lưu trữ trong một tệp tạm thời. Sau đó, hàm này tải tệp âm thanh cuối cùng lên thùng S3, cho phép truy cập công khai và cập nhật bản ghi DynamoDB bằng URL của tệp MP3.\nKiểm tra mã. Hàm Lambda thực hiện những điều sau:\nTruy xuất ID của mục DynamoDB (ID bài đăng) cần được chuyển đổi thành tệp âm thanh từ tin nhắn đầu vào (sự kiện SNS) Lấy mục từ DynamoDB Chuyển đổi văn bản thành luồng âm thanh Đặt tệp âm thanh (MP3) vào thùng S3 Cập nhật bảng DynamoDB bằng tham chiếu đến thùng S3 và trạng thái mới Phương thức synthesize_speech nhận văn bản cần chuyển đổi và giọng nói cần sử dụng. Đổi lại, nó cung cấp luồng âm thanh. Vấn đề là có giới hạn kích thước là 3000 ký tự trên văn bản có thể được cung cấp làm đầu vào. Vì bài đăng có thể lớn, nên các bài đăng cần được chia thành các khối khoảng 2500 ký tự, tùy thuộc vào vị trí kết thúc của từ cuối cùng trong khối. Sau khi chuyển đổi các khối thành luồng âm thanh, chúng được nối lại với nhau.\nChọn Deploy. Chọn tab Configuration để cấu hình các biến môi trường. Trong ngăn điều hướng bên trái, chọn Environment variables. Trong phần Environment variables, chọn Edit. Chọn Add environment variable.\nKey: Nhập DB_TABLE_NAME Value: Nhập posts Chọn Add environment variable.\nKey: Enter BUCKET_NAME Value: Nhập tên của bucket bạn đã tạo trước đó. Nó sẽ trông giống như: audioposts-123 Chọn Save. Các bài đăng cần chuyển đổi có thể khá lớn, vì vậy bạn cần kéo dài thời gian tối đa thực thi một mã lên 5 phút.\nTrong phần General configuration, chọn Edit. Cập nhật Timeout lên 5 phút. Chọn Save. Bây giờ bạn cấu hình chức năng để tự động kích hoạt khi có tin nhắn được gửi đến chủ đề SNS mà bạn đã tạo trước đó.\nTrong phần Triggers, chọn Add trigger rồi cấu hình: Select a source: SNS SNS topic: Chọn new_posts từ các chủ đề có sẵn. Chọn Add. Bây giờ bạn đã sẵn sàng để kiểm tra xem hai hàm Lambda có giao tiếp thành công qua SNS hay không và tạo tệp âm thanh Polly.\n"
},
{
	"uri": "http://Trung1616.github.io/vi/5-cleanup/5.5-delete-amazon-api-gateway/",
	"title": "Xóa Amazon API Gateway.",
	"tags": [],
	"description": "",
	"content": "Xóa API Gateway được sử dụng để kết nối các hàm Lambda cho việc truy cập từ web.\nỞ đầu AWS Management Console, trên thanh tìm kiếm, hãy tìm kiếm và chọn API Gateway. Trong ngăn điều hướng bên trái, chọn APIs. Nhập confirm vào hộp xác nhận và chọn Delete để xóa. "
},
{
	"uri": "http://Trung1616.github.io/vi/6-future-expansion-directions-and-references/",
	"title": "Hướng mở rộng trong tương lai và tài liệu tham khảo",
	"tags": [],
	"description": "",
	"content": "Hướng mở rộng trong tương lai Chúng tôi có thể xem xét và mở rộng các tính năng mới cho hệ thống trong tương lai, chẳng hạn như:\nHỗ trợ ngôn ngữ nâng cao: Sử dụng các dịch vụ AWS bổ sung hoặc API của bên thứ ba để kết hợp nhiều ngôn ngữ và phương ngữ hơn cho đối tượng rộng hơn.\nTùy chỉnh giọng nói: Tận dụng các tính năng SSML (Ngôn ngữ đánh dấu tổng hợp giọng nói) của AWS Polly để cho phép người dùng tùy chỉnh các thông số giọng nói như cao độ và tốc độ.\nTích hợp với các dịch vụ AWS khác: Kết nối ứng dụng với Amazon Transcribe để có khả năng chuyển giọng nói thành văn bản hoặc các chức năng AWS Lambda để thực hiện các tác vụ xử lý bổ sung.\nPhân tích với Amazon CloudWatch: Triển khai các tính năng phân tích bằng Amazon CloudWatch để theo dõi mức độ tương tác của người dùng với nội dung âm thanh và theo dõi số liệu hiệu suất.\nPhản hồi của người dùng với AWS DynamoDB: Tạo hệ thống phản hồi nơi người dùng có thể đánh giá giọng nói và gửi đề xuất, lưu trữ dữ liệu này trong DynamoDB để phân tích.\nTích hợp đa phương tiện: Mở rộng nội dung ra ngoài văn bản bằng cách kết hợp hình ảnh hoặc nội dung video có thể nâng cao trải nghiệm nghe.\nTài liệu tham khảo Xây dựng ứng dụng chuyển văn bản thành giọng nói của riêng bạn với Amazon Polly\nAmazon Polly là gì?\nAmazon API Gateway là gì?\nAWS Lambda là gì?\n"
},
{
	"uri": "http://Trung1616.github.io/vi/3-implementation-steps/3.6-test-the-functions/",
	"title": "Kiểm tra các chức năng",
	"tags": [],
	"description": "",
	"content": "Bây giờ bạn hãy thử quy trình làm việc sau:\nKích hoạt thủ công chức năng New Post Lambda Nó lưu trữ dữ liệu trong DynamoDB và gửi tin nhắn đến chủ đề SNS SNS kích hoạt chức năng Chuyển đổi thành âm thanh, sử dụng Polly để tạo tệp âm thanh và lưu trữ trong thùng S3. Chọn Functions ở góc trên bên trái. Bạn có thể cần mở rộng ngăn điều hướng bằng cách chọn biểu tượng menu.\nChọn hàm PostReader_NewPost. Chọn Test. Bạn sẽ thấy thông báo: Kết quả thực hiện: thành công (Execution result: succeeded).\nĐiều này cho biết chức năng này đã được thực hiện. Bây giờ bạn xác nhận rằng các bước khác cũng đã hoàn tất thành công.\nỞ đầu AWS Management Console, trong thanh tìm kiếm, hãy tìm kiếm và chọn DynamoDB. Trong ngăn điều hướng bên trái, chọn Explore items. Chọn posts. Bạn sẽ thấy hai mục nhập vì bạn đã chạy thử nghiệm hai lần. Lần thực hiện thứ hai cũng sẽ kích hoạt chức năng Convert to Audio Lambda, do đó cũng có một mục nhập cho url.\nỞ đầu AWS Management Console, trên thanh tìm kiếm, hãy tìm kiếm và chọn Lambda. Chọn chức năng ConvertToAudio. Chọn tab Monitor. Nếu biểu đồ Số lỗi và Tỷ lệ thành công cho thấy đã xảy ra lỗi, thì bạn cần phải điều tra lỗi đó:\nChọn View CloudWatch logs Chọn Log Stream được hiển thị trong danh sách Mở rộng các mục nhật ký để khám phá thông báo lỗi Ví dụ, nếu bạn nhận được lỗi The specified bucket does not exist (Không tồn tại thùng được chỉ định ), thì bạn cần xác nhận rằng tên thùng bạn nhập vào Biến môi trường khớp với tên thùng S3 bạn đã tạo trước đó trong phòng thí nghiệm.\nNếu chức năng Chuyển đổi thành âm thanh được thực hiện thành công, bạn sẽ thấy tệp MP3 trong thùng S3 của mình.\nỞ đầu AWS Management Console, trong thanh tìm kiếm, hãy tìm kiếm và chọn S3 Chọn audioposts- bucket của bạn. Bạn sẽ thấy các tệp MP3 và bạn có thể tải xuống và nghe chúng. "
},
{
	"uri": "http://Trung1616.github.io/vi/5-cleanup/5.6-delete-cloudformation-stack/",
	"title": "Xóa Amazon SNS",
	"tags": [],
	"description": "",
	"content": "Xóa CloudFormation stack để tránh bất kỳ khoản phí bất ngờ nào trên hóa đơn AWS của bạn. Bạn có thể xóa toàn bộ ngăn xếp khỏi AWS CloudFormation Console. Thao tác này sẽ tự động xóa tất cả các tài nguyên liên quan theo đúng thứ tự, giúp giảm các bước thủ công.\nỞ đầu AWS Management Console, trong thanh tìm kiếm, hãy tìm kiếm và chọn CloudFormation Trong ngăn điều hướng bên trái, chọn Stacks.\nChọn stack polly-serverless-stack-ThanhTrung và chọn Delete để xóa Chọn Delete để xóa. "
},
{
	"uri": "http://Trung1616.github.io/vi/3-implementation-steps/3.7-create-a-get-post-lambda-function/",
	"title": "Tạo hàm Lambda get post",
	"tags": [],
	"description": "",
	"content": "Hàm Get Post Lambda cuối cùng cung cấp phương pháp để lấy thông tin về các bài đăng từ cơ sở dữ liệu.\nỞ đầu AWS Management Console, trên thanh tìm kiếm, hãy tìm kiếm và chọn Lambda. Chọn Create function. Chọn Author from scratch và sử dụng các cài đặt sau: Function name: PostReader_GetPost Runtime: Python 3.12 Mở rộng Change default execution role Execution role: Chọn Use an existing role Existing role: Chọn Lab-Lambda-Role Cuộn xuống và chọn Create function. Lệnh: Xóa mã hiện tại và dán mã sau: import boto3 import os from boto3.dynamodb.conditions import Key, Attr def lambda_handler(event, context): postId = event[\u0026#34;postId\u0026#34;] dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) if postId==\u0026#34;*\u0026#34;: items = table.scan() else: items = table.query( KeyConditionExpression=Key(\u0026#39;id\u0026#39;).eq(postId) ) return items[\u0026#34;Items\u0026#34;] Giải thích mã: Hàm AWS Lambda này lấy các bản ghi từ bảng DynamoDB. Hàm này sử dụng postId từ đầu vào sự kiện để xác định những bản ghi nào cần lấy. Nếu postId bằng “*”, hàm sẽ lấy tất cả các mục từ bảng bằng phương thức scan() . Nếu không, hàm sẽ truy vấn một mục cụ thể bằng cách khớp trường id với postId . Hàm trả về danh sách các mục đã lấy.\nChọn Deploy Một lần nữa, bạn cần cung cấp tên bảng DynamoDB làm biến môi trường cho hàm.\nChọn tab Configuration để cấu hình các biến môi trường. Trong ngăn điều hướng bên trái, chọn Environment variables. Trong phần Environment variables, chọn Edit. Chọn Add environment variable. Key: Nhập DB_TABLE_NAME Value: Nhập posts Chọn Save. Bây giờ bạn có thể kiểm tra chức năng này!\nTrong tab Test, hãy tạo sự kiện kiểm tra của bạn bằng các tham số sau: Event name AllPosts Lệnh Thay thế mã hiện tại bằng mã sau: { \u0026#34;postId\u0026#34;: \u0026#34;*\u0026#34; } Chọn Save. Chọn Test để chạy sự kiện kiểm tra. Bạn sẽ thấy thông báo: Kết quả thực hiện: thành công\nNếu bạn mở rộng phần Details, bạn sẽ thấy danh sách tất cả các bản ghi từ bảng DynamoDB.\n"
},
{
	"uri": "http://Trung1616.github.io/vi/3-implementation-steps/3.8-expose-the-lambda-function-as-a-restful-web-service/",
	"title": "Trình bày chức năng Lambda như một dịch vụ web RESTful",
	"tags": [],
	"description": "",
	"content": "Điều cuối cùng bạn cần làm là phơi bày logic ứng dụng dưới dạng dịch vụ web RESTful để có thể dễ dàng gọi bằng giao thức HTTP chuẩn. Để thực hiện việc này, bạn sử dụng Amazon API Gateway.\nỞ đầu AWS Management Console, trên thanh tìm kiếm, hãy tìm kiếm và chọn API Gateway. Trong bảng điều khiển Rest API , chọn Build . Trong phần Create REST API, để biết API details, hãy sử dụng các tham số sau:\nChọn New API API name: PostReaderAPI Description: API for PostReader Application Endpoint Type: Regional Chọn Create API. Sau khi API được tạo, bạn cần tạo hai HTTP methods.\nBạn bắt đầu bằng cách cấu hình phương thức POST để gọi hàm Lambda PostReader_NewPost.\nTrong ngăn Methods, chọn Create method. Đối với Method type, chọn POST. Đối với Lambda Function, hãy chọn hàm có chứa PostReader_NewPost trong tên. Chọn Create method. Đối với phương thức GET, API sẽ gọi hàm Lambda PostReader_GetPost.\nTrong ngăn Resources, chọn biểu tượng / phía trên POST. Trong ngăn Methods, chọn Create method. Đối với Method type, chọn GET. Đối với Lambda Function, hãy chọn hàm có chứa PostReader_GetPost trong tên. Chọn Create method. Phương pháp cuối cùng để cấu hình là CORS (Cross-Origin Resource Sharing). Phương pháp này cho phép gọi API từ một trang web có tên máy chủ khác.\nTrong ngăn Resources , chọn biểu tượng / phía trên GET. Trong ngăn Resource details, chọn Enable CORS. Đối với Gateway responses, chọn Default 4XX và Default 5XX. Đối với Access-Control-Allow-Methods, chọn GET và POST. Chọn Save. Sau khi hoàn tất các bước này, bạn sẽ thấy thông báo xác nhận CORS đã được bật thành công.\nBây giờ bạn cấu hình phương thức GET cho tham số truy vấn, postId , cung cấp thông tin về id của bài đăng cần trả về.\nChọn phương thức GET. Trong ngăn Method request settings, chọn Edit. Mở rộng phần URL query string parameters. Chọn Add query string. Đối với Name, nhập postId. Chọn Save. Hàm Lambda PostReader_GetPost mong đợi nhận dữ liệu đầu vào ở định dạng JSON, do đó API cần được cấu hình để ánh xạ tham số vào định dạng này. Để thực hiện việc này, bạn có thể thêm ánh xạ vào cấu hình Yêu cầu tích hợp.\nChọn tab Integration request.\nTrong ngăn Integration requests settings, chọn Edit. Đối với Request body passthrough, chọn When there are no templates defined (recommended).\nMở rộng Mapping templates.\nChọn Add mapping template.\nĐối với Content type, nhập application/json.\nĐối với Template body, nhập: { \u0026#34;postId\u0026#34; : \u0026#34;$input.params(\u0026#39;postId\u0026#39;)\u0026#34; }\nChọn Save. API đã sẵn sàng để triển khai!\nChọn Deploy API. Stage: Chọn New Stage Stage name: Dev Chọn Deploy Sao chép giá trị Invoke URL và lưu vào trình soạn thảo văn bản để sử dụng sau. Lưu ý: URL được sử dụng sau này để tương tác với ứng dụng.\n"
},
{
	"uri": "http://Trung1616.github.io/vi/3-implementation-steps/3.9-create-a-serverless-user-interface/",
	"title": "Tạo giao diện người dùng không có máy chủ",
	"tags": [],
	"description": "",
	"content": "Mặc dù ứng dụng hoạt động đầy đủ, nhưng nó chỉ được hiển thị dưới dạng dịch vụ web RESTful. Bây giờ bạn triển khai một trang web nhỏ trên Amazon S3, đây là lựa chọn tuyệt vời để lưu trữ các trang web tĩnh. Trang web này sử dụng JavaScript để kết nối với API và cung cấp chức năng chuyển văn bản thành giọng nói trong trang web.\nTải các tập tin này về máy tính của bạn, nhấp chuột phải và chọn “Lưu liên kết dưới dạng…”. index.html scripts.js styles.css Nếu bạn không thể tải xuống các tệp trên, bạn có thể truy cập chúng tại đây: Tải về\nLưu ý: Đảm bảo rằng mỗi tệp đều giữ nguyên tên tệp, bao gồm cả phần mở rộng.\nChỉnh sửa tệp scripts.js của bạn bằng Trình soạn thảo văn bản, thay thế YOUR_API_GATEWAY_ENDPOINT (ở dòng đầu tiên) bằng URL Invoke mà bạn đã sao chép trước đó. Đầu ra dự kiến:\nvar API_ENDPOINT = \u0026#34;https://xxxxx.execute-api.us-west-2.amazonaws.com/Dev\u0026#34; Bây giờ bạn tải các tệp này lên Amazon S3 bucket.\nỞ đầu AWS Management Console, trên thanh tìm kiếm, hãy tìm kiếm và chọn S3. ChọnCreate bucket và cấu hình các thông tin chi tiết sau: Bucket name: www-BUCKET Thay thế BUCKET bằng tên của thùng audioposts của bạn. Sao chép tên bucket của bạn vào trình soạn thảo văn bản. Bạn sẽ sử dụng tên bucket sau. Bạn thay đổi quyền của bucket để mọi người đều có thể truy cập vào trang web. Trong Object Ownership, chọn ACLs enabled Chọn Block Public Access settings for this bucket bỏ chọn tùy chọn Block all public access và sau đó giữ nguyên tất cả các tùy chọn khác không được chọn. Lưu ý: Lưu ý tất cả các tùy chọn riêng lẻ vẫn được bỏ chọn. Khi bỏ chọn tất cả quyền truy cập công khai, sau đó bạn phải chọn các tùy chọn riêng lẻ áp dụng cho tình huống và mục tiêu bảo mật của mình. Trong môi trường sản xuất, bạn nên sử dụng cài đặt ít cho phép nhất có thể.\nMột hộp cảnh báo xuất hiện nói rằng: Tắt chặn mọi quyền truy cập công khai có thể khiến thùng này và các đối tượng bên trong trở thành công khai. AWS khuyên bạn nên bật chặn mọi quyền truy cập công khai, trừ khi quyền truy cập công khai là bắt buộc đối với các trường hợp sử dụng cụ thể và đã xác minh như lưu trữ trang web tĩnh.\nChọn hộp kiểm bên cạnh I acknowledge that the current settings might result in this bucket and the objects within becoming public (Tôi thừa nhận rằng các cài đặt hiện tại có thể khiến thùng này và các đối tượng bên trong trở nên công khai ). Chọn Create bucket Sau khi hoàn tất các bước này, bạn sẽ thấy thông báo xác nhận rằng bucket đã được tạo thành công\nSau khi tạo xong bucket, hãy chọn bucket đó từ danh sách bucket và tải ba tệp lên bucket www mới của bạn Lưu ý: Các tệp phải được đặt tên là: index.html , scripts.js và styles.css\nTrên trang nhóm, chọn tab Permissions ở trên cùng. Cuộn xuống phầnBucket Policy và chọn nút Edit. Dán chính sách này vào trình soạn thảo: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:GetObject\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3:::www-BUCKET/*\u0026#34; ] } ] } Thay thế www-BUCKET bằng tên bucket www-audioposts của bạn . Chọn Save changes. CẢNH BÁO: Nếu bạn nhận được lỗi Chính sách có tài nguyên không hợp lệ , hãy xác nhận rằng bạn đã chỉnh sửa dòng Tài nguyên cho khớp với tên nhóm của mình.\nLưu ý: Bạn có thể bỏ qua cảnh báo rằng Bucket này có quyền truy cập công khai. Điều này là có chủ đích.\nCuối cùng, bạn kích static website hosting, giúp bucket lưu trữ hoạt động giống như một trang web tĩnh.. Chọn tab Properties. Bỏ qua lỗi Quyền AWS CloudTrail. Cuộn xuống phần Static website hosting và chọn Edit. Chọn Enable cho Static website hosting. Index document: index.html Error document: index.html Lưu ý: Hiện tại chúng ta đang sử dụng tệp index.html làm tài liệu lỗi .\nChọn Save changes. Sao chép URL Endpoint vào clipboard của bạn. Và thế là xong! Bây giờ bạn có thể kiểm tra xem trang web có hoạt động không.\nMở một tab trình duyệt web mới và dán URL Endpoint mà bạn vừa sao chép. Bạn sẽ thấy một trang web trông như thế này: Nếu bạn viết gì đó trong vùng văn bản và chọn Say it, sự kiện sẽ được gửi đến ứng dụng của bạn. Ứng dụng sẽ chuyển đổi văn bản thành tệp âm thanh một cách không đồng bộ. Tùy thuộc vào độ dài của văn bản, quá trình chuyển đổi có thể mất vài giây hoặc vài phút.\nĐể xem bài đăng và tệp âm thanh của bài đăng, hãy nhập ID bài đăng hoặc * vào hộp Tìm kiếm:\nNhấn nút Phát(Play) để nghe âm thanh. Bạn có thể xem hệ thống hoạt động như thế nào trong video bên dưới:\nĐến đây, bạn đã xây dựng thành công ứng dụng chuyển văn bản thành giọng nói không cần máy chủ với Amazon Polly\n"
},
{
	"uri": "http://Trung1616.github.io/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://Trung1616.github.io/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]