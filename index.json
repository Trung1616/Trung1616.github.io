[
{
	"uri": "http://Trung1616.github.io/3-implementation-steps/3.1-create-a-dynamodb-table/",
	"title": "Create a DynamoDB table",
	"tags": [],
	"description": "",
	"content": "The application stores information about blog posts, including the text and URL of the MP3 file, in Amazon DynamoDB. You start by creating a posts table. The primary key (id) is a string, which the New Post Lambda function creates when new records (posts) are inserted into the database.\nAt the top of the AWS Management Console, in the search bar, search for and choose DynamoDB. Choose Create table Create a new DynamoDB table with: Table name: posts Partition key: id (String) Table settings: Default settings Choose Create table. There is no need to define the whole structure of the table now. After you complete the application setup, it stores the following information in the DynamoDB table:\nid: The ID of the post. status: UPDATED or PROCESSING, depending on whether an MP3 file has already been created. text: The post\u0026rsquo;s text, for which an audio file is being created. voice: The Amazon Polly voice that was used to create audio file. url: A link to an S3 bucket where an audio file is being stored. "
},
{
	"uri": "http://Trung1616.github.io/5-cleanup/5.1-delete-amazon-sns/",
	"title": "Delete Amazon SNS",
	"tags": [],
	"description": "",
	"content": "Start by deleting the SNS topic. Since other services may send messages here, deleting the SNS topic first will ensure no issues arise later.\nAt the top of the AWS Management Console, in the search bar, search for and choose Simple Notification Service (SNS) In the left navigation pane, choose Topics.\nClick Topics new_posts Choose Delete Type delete me in the confirmation box and select Delete to delete. "
},
{
	"uri": "http://Trung1616.github.io/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Objectives By the end of this workshop, you should be able to:\nCreate an Amazon DynamoDB table to store data Create an Amazon API Gateway RESTful API Create AWS Lambda functions triggered by API Gateway Connect AWS Lambda functions with Amazon Simple Notification Service (SNS) Use Amazon Polly to synthesize speech in a variety of languages and voices Coming to this workshop you will build a serverless application, which means that you do not need to work with servers — no provisioning, no patching, no scaling. The AWS Cloud automatically takes care of this, allowing you to focus on your application.\nThe application provides two methods – one for sending information about a new post, which should be converted into an MP3 file, and one for retrieving information about the post (including a link to the MP3 file stored in an Amazon S3 bucket). Both methods are exposed as RESTful web services through Amazon API Gateway.\nWhen the application sends information about new posts:\nThe information is received by the RESTful web service exposed by Amazon API Gateway. This web service is invoked by a static webpage hosted on Amazon Simple Storage Service (Amazon S3). Amazon API Gateway triggers an AWS Lambda function, New Post, which is responsible for initializing the process of generating MP3 files. The Lambda function inserts information about the post into an Amazon DynamoDB table, where information about all posts is stored. To run the whole process asynchronously, you use Amazon Simple Notification Service (Amazon SNS) to decouple the process of receiving information about new posts and starting their audio conversion. Another Lambda function, Convert to Audio, is subscribed to your SNS topic and is triggered whenever a new message appears (which means that a new post should be converted into an audio file). The Convert to Audio Lambda function uses Amazon Polly to convert the text into an audio file in the specified language (the same as the language of the text). The new MP3 file is saved in a dedicated S3 bucket. Information about the post is updated in the DynamoDB table. The URL to the audio file stored in the S3 bucket is saved with the previously stored data. When the application retrieves information about posts:\nThe RESTful web service is deployed using Amazon API Gateway. Amazon API Gateway exposes the method for retrieving information about posts. These methods contain the text of the post and the link to the S3 bucket where the MP3 file is stored. The web service is invoked by a static webpage hosted on Amazon S3. Amazon API Gateway invokes the Get Post Lambda function, which deploys the logic for retrieving the post data. The Get Post Lambda function retrieves information about the post (including the reference to Amazon S3) from the DynamoDB table and returns the information. Introduction to the tools and services used in the Workshop Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. It allows developers to store and retrieve any amount of data and serve any level of request traffic. It is widely used for applications that need high availability and low-latency access to data.\nAmazon API Gateway is a fully managed service that enables developers to create, publish, maintain, monitor, and secure APIs at any scale. It acts as a \u0026ldquo;front door\u0026rdquo; for applications to access data, business logic, or functionality from backend services like AWS Lambda, DynamoDB, and others.\nAWS Lambda is a serverless compute service that lets you run code without provisioning or managing servers. You can trigger Lambda functions in response to various events, such as changes in data or HTTP requests, and only pay for the compute time you consume.\nAmazon SNS is a fully managed messaging service for sending notifications from the cloud. It supports a variety of formats, including text messages (SMS), emails, and mobile push notifications. SNS is often used to notify subscribers of important events in real-time.\nAmazon Polly is a cloud service that converts text into lifelike speech using advanced deep learning technologies. It supports multiple languages and voice types, making it ideal for applications like voice assistants, chatbots, and more.\n"
},
{
	"uri": "http://Trung1616.github.io/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": "Building a Serverless Text-to-Speech Application with Amazon Polly Overall In this workshop, you\u0026rsquo;ll build a serverless application on AWS that converts posts into MP3 files and provides RESTful web services for sending and retrieving post information via Amazon API Gateway.\nContent Introduction Preparation steps Implementation steps Workshop Conclusions Clean up resources Future Expansion Directions and References "
},
{
	"uri": "http://Trung1616.github.io/3-implementation-steps/3.2-create-an-amazon-s3-bucket/",
	"title": "Create an Amazon S3 bucket",
	"tags": [],
	"description": "",
	"content": "You need to create an Amazon S3 bucket to store all audio files created by the application. You create a bucket with a unique name, such as audioposts-123456789.\nAt the top of the AWS Management Console, in the search bar, search for and choose S3. Choose Create bucket and configure the following details Bucket name: audioposts-NUMBER Replace NUMBER with a random number Copy the name of your bucket to your text editor as you use the bucket name later. Under Object Ownership, choose ACLs enabled Under Block Public Access settings for this bucket deselect the Block all public access option, and then leave all other options deselected. Notice all of the individual options remain deselected. When deselecting all public access, you must then select the individual options that apply to your situation and security objectives. In a production environment, it is recommended to use the least permissive settings possible.\nA warning box appears saying that: Turning off block all public access might result in this bucket and the objects within becoming public. AWS recommends that you turn on block all public access, unless public access is required for specific and verified use cases such as static website hosting.\nSelect the check box next to I acknowledge that the current settings might result in this bucket and the objects within becoming public. Choose Create bucket. Every Amazon S3 bucket must have a unique name.\nCaution: If you receive an error stating The requested bucket name is not available, select the top Edit link, change the bucket name, and try again until it works. "
},
{
	"uri": "http://Trung1616.github.io/5-cleanup/5.2-delete-lambda-functions/",
	"title": "Delete Lambda Functions.",
	"tags": [],
	"description": "",
	"content": "Start by deleting the SNS topic. Since other services may send messages here, deleting the SNS topic first will ensure no issues arise later.\nAt the top of the AWS Management Console, in the search bar, search for and choose Simple Notification Service (SNS) In the left navigation pane, choose Topics.\nClick Topics new_posts Choose Delete Type delete me in the confirmation box and select Delete to delete. "
},
{
	"uri": "http://Trung1616.github.io/2-prerequiste/",
	"title": "Preparation steps",
	"tags": [],
	"description": "",
	"content": "If you have access to the AWS Management Console with administrative privileges, you can use your AWS account to initiate this workshop.\nLaunch a CloudFormartion stack The AWS CloudFormation template is used to set up lab resources in the AWS Region that you choose. This step is required because later instructions are based on these resources. The CloudFormation template provisions the following resources:\nIAM Role. Amazon DynamoDB table. AWS Step Functions State Machine. Download the CloudFormation template:Download\nDownload (fallback)\nStore the YAML template file in a folder on your local machine.\nNavigate to CloudFormation in the AWS Management Console .\nOn the CloudFormation console, choose Upload a template file.\nSelect the template that you just downloaded, and then choose Next.\nGive the stack a name, such as polly-serverless-stack\nFor Configure stack options, keep the default values and choose Next.\nIn Capabilities and transforms, acknowledge all.\nTo deploy the template, choose Submit.\nAfter the template is deployed, to review the created resources, navigate to CloudFormation Resources, and then select the CloudFormation stack that you created. Cloud Formation deployment takes 1–2 minutes to complete.\n"
},
{
	"uri": "http://Trung1616.github.io/3-implementation-steps/3.3-create-an-sns-topic/",
	"title": "Create an SNS topic",
	"tags": [],
	"description": "",
	"content": "As you probably noticed in the architecture diagram, the logic of converting a post (text) into an audio file is split into two AWS Lambda functions. This was done for a couple of reasons.\nFirst, it allows the application to use asynchronous calls so that the user who sends a new post to the application immediately receives the ID of the new DynamoDB item, so it knows what to ask for later without having to wait for the conversion to finish. With small posts, the process of converting to audio files can take milliseconds, but with bigger posts (100,000 words or more), converting the text can take longer. In other use cases, such as real-time streaming, size is not a problem because Amazon Polly starts to stream speech back as soon as the first bytes are available.\nSecond, the system uses a Lambda function to convert the posts.\nGiven that the process has been divided into two processes, there needs to be a way to integrate them together. You use Amazon SNS to send the message about the new post from the first function to the second function.\nAt the top of the AWS Management Console, in the search bar, search for and choose Simple Notification Service (SNS) In the left navigation pane, choose Topics. Note: You might need to expand the navigation pane by choosing the menu icon.\nChoose Create topic and configure the following details: Type: Choose Standard Name: new_posts Display name: New Posts At the bottom of the page, choose Create topic. Copy the Topic ARN and paste it into a text editor for later use. Expected output:\narn:aws:sns:ap-southeast-1:058264437089:new_posts You configure the Lambda functions to use this Topic ARN later in the lab.\n"
},
{
	"uri": "http://Trung1616.github.io/5-cleanup/5.3-delete-amazon-dynamodb/",
	"title": "Delete Amazon DynamoDB.",
	"tags": [],
	"description": "",
	"content": "Delete the DynamoDB table used for storing posts. You may want to back up the data if necessary before deletion.\nAt the top of the AWS Management Console, in the search bar, search for and choose DynamoDB. In the left navigation pane, choose Tables.\nChoose Table posts\nChoose Delete Choose Delete all CloudWatch alarms for post\nType comfirm in the confirmation box and select Delete to delete. "
},
{
	"uri": "http://Trung1616.github.io/3-implementation-steps/",
	"title": "Implementation steps",
	"tags": [],
	"description": "",
	"content": "In this lab, you will go through a series of steps to build a serverless application on AWS that converts posts to MP3 files and provides a RESTful web service to send and retrieve post information via Amazon API Gateway.\nContent 3.1. Create a DynamoDB table 3.2. Create an Amazon S3 bucket 3.3. Create an SNS topic 3.4. Create a new post Lambda function 3.5. Create a convert to audio Lambda function 3.6. Test the functions 3.7. Create a get post Lambda function 3.8. Expose the Lambda function as a RESTful web service 3.9. Create a Serverless User Interface\n"
},
{
	"uri": "http://Trung1616.github.io/3-implementation-steps/3.4-creat-a-new-post-lambda-function/",
	"title": "Create a new post Lambda function",
	"tags": [],
	"description": "",
	"content": "The first Lambda function you create is the entry point for the application. It receives information about new posts that should be converted into audio files.\nAt the top of the AWS Management Console, in the search bar, search for and choose Lambda. Choose Create function. Choose Author from scratch and use the following settings:\nFunction name: PostReader_NewPost Runtime: Python 3.12 Expand Change default execution role Execution role: Choose Use an existing role Existing role: Choose Lab-Lambda-Role Choose Create function. Command: Delete the existing code and paste the following code: import boto3 import os import uuid def lambda_handler(event, context): recordId = str(uuid.uuid4()) voice = event[\u0026#34;voice\u0026#34;] text = event[\u0026#34;text\u0026#34;] print(\u0026#39;Generating new DynamoDB record, with ID: \u0026#39; + recordId) print(\u0026#39;Input Text: \u0026#39; + text) print(\u0026#39;Selected voice: \u0026#39; + voice) # Creating new record in DynamoDB table dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) table.put_item( Item={ \u0026#39;id\u0026#39; : recordId, \u0026#39;text\u0026#39; : text, \u0026#39;voice\u0026#39; : voice, \u0026#39;status\u0026#39; : \u0026#39;PROCESSING\u0026#39; } ) # Sending notification about new post to SNS client = boto3.client(\u0026#39;sns\u0026#39;) client.publish( TopicArn = os.environ[\u0026#39;SNS_TOPIC\u0026#39;], Message = recordId ) return recordId Code explanation: This code is an AWS Lambda function written in Python. It takes input data, including text and voice, from the triggering event, then stores this information in a DynamoDB table with an initial status of \u0026ldquo;PROCESSING.\u0026rdquo; After saving the data, the function sends a notification via the SNS service to inform that a new record has been created, and finally returns the ID of the created record. The code uses the boto3 library to interact with AWS services.\nExamine the code. The Lambda function does the following:\nRetrieves two input parameters: Voice: One of dozens of voices that are supported by Amazon Polly Text: The text of the post that we want to convert into an audio file Creates a new record in the DynamoDB table with information about the new post Publishes information about the new post to SNS (the ID of the DynamoDB item/post ID is published there as a message) Returns the ID of the DynamoDB item to the user Choose Deploy. The Lambda function needs to know the name of the DynamoDB table and the SNS topic. To provide these values, you use environment variables. This is an excellent way to pass information to a function without hard-coding values into the function itself.\nChoose the Configuration tab to configure the environment variables. In the left navigation pane, choose Environment variables. In the Environment variables section, choose Choose Edit. Choose Add environment variable.\nKey: Enter SNS_TOPIC Value: Paste the SNS topic you copied earlier in the lab Choose Add environment variable.\nKey: Enter DB_TABLE_NAME Value: Enter posts Choose Save. In the left navigation pane of the Configuration tab, choose General configuration.\nIn the General configuration, choose Edit.\nUpdate the Timeout to 10 seconds Choose Save. The New Post Lambda function is ready! You can now test that the function works.\nChoose the Test tab and configure the following details: Event name: Joanna Command: Delete the existing code and paste the following code: { \u0026#34;voice\u0026#34;: \u0026#34;Joanna\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;This is working!\u0026#34; } Choose Save.\nChoose Test to run your test event.\nYou should see the message: Execution result: succeeded.\nYou can expand the Details section to view the execution log.\nThe New Post Lambda function returns an ID and you can see the input values in the Log output.\n"
},
{
	"uri": "http://Trung1616.github.io/5-cleanup/5.4-delete-amazon-s3-buckets/",
	"title": "Delete Amazon S3 Buckets",
	"tags": [],
	"description": "",
	"content": "Delete the two S3 buckets:\nOne is storing static web content. The other is storing MP3 files created by Polly. Make sure to empty the buckets before deletion.\nDelete bucket www-audioposts-thanhtrung\nAt the top of the AWS Management Console, in the search bar, search for and choose S3. Click bucket www-audioposts-thanhtrung. Select all files in the bucket and select Delete Choose bucket www-audioposts-thanhtrung and choose Delete.\n5. Type www-audioposts-thanhtrung in the confirmation box and select Delete bucket to delete. Delete bucket audioposts-21133090\nClick bucket audioposts-21133090. Select all files in the bucket and yype permanently delete in the confirmation box and select Delete objects to delete. Choose bucket audioposts-21133090 and choose Delete.\nType audioposts-21133090 in the confirmation box and select Delete bucket to delete. "
},
{
	"uri": "http://Trung1616.github.io/4-summary/",
	"title": "Workshop Conclusions",
	"tags": [],
	"description": "",
	"content": "Final Thoughts Building a Serverless, Multi-Language Text-to-Speech Application: Unlocking New Possibilities\nIn this project, you successfully accomplished\nSet up an Amazon DynamoDB table for data Created a RESTful API using Amazon API Gateway Built AWS Lambda functions, seamlessly triggered by the API Integrated AWS Lambda with Amazon Simple Notification Service (SNS) Leveraged Amazon Polly to generate speech in multiple languages and voices By the end, you developed a fully serverless application capable of converting text—such as blog posts—into spoken word, using a range of voices and languages. While this example focused on blogs, the solution can easily be adapted for diverse use cases, such as converting web content to speech or embedding voice features into web applications.\nThanks to the serverless nature of AWS Lambda, Amazon API Gateway, Amazon S3, and DynamoDB, the application requires no server maintenance, is highly available by design, and automatically scales across multiple Availability Zones.\nNow, the possibilities are endless. This approach empowers you to innovate and build applications that deliver a richer, more engaging user experience than ever before.\n"
},
{
	"uri": "http://Trung1616.github.io/5-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "To clean up resources after completing the Workshop, you can follow the steps below, focusing on deleting the corresponding resources in the correct order. At the top of the AWS Management Console, in the search bar, search for and select the respective services to clean up as follows:\n5.1. Delete Amazon SNS. 5.2. Delete Lambda Functions.\n5.3. Delete Amazon DynamoDB.\n5.4. Delete Amazon S3 Buckets.\n5.5. Delete Amazon API Gateway.\n5.6. Delete CloudFormation Stack\n"
},
{
	"uri": "http://Trung1616.github.io/3-implementation-steps/3.5-create-a-convert-to-audio-lambda-function/",
	"title": "Create a convert to audio Lambda function",
	"tags": [],
	"description": "",
	"content": "You now create a Lambda function that converts text that is stored in the DynamoDB table into an audio file.\nChoose Functions in the top-left navigation pane. You might need to expand the navigation pane by choosing the menu icon.\nChoose Create function. Choose Author from scratch and use the following settings:\nFunction name: ConvertToAudio Runtime: Python 3.12 Expand Change default execution role Execution role: Choose Use an existing role Existing role: Choose Lab-Lambda-Role Scroll down and choose Create function.\nCommand: Delete the existing code and paste the following code: import boto3 import os from contextlib import closing from boto3.dynamodb.conditions import Key, Attr def lambda_handler(event, context): postId = event[\u0026#34;Records\u0026#34;][0][\u0026#34;Sns\u0026#34;][\u0026#34;Message\u0026#34;] print (\u0026#34;Text to Speech function. Post ID in DynamoDB: \u0026#34; + postId) # Retrieving information about the post from DynamoDB table dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) postItem = table.query( KeyConditionExpression=Key(\u0026#39;id\u0026#39;).eq(postId) ) text = postItem[\u0026#34;Items\u0026#34;][0][\u0026#34;text\u0026#34;] voice = postItem[\u0026#34;Items\u0026#34;][0][\u0026#34;voice\u0026#34;] rest = text # Because single invocation of the polly synthesize_speech api can # transform text with about 3000 characters, we are dividing the # post into blocks of approximately 2500 characters. textBlocks = [] while (len(rest) \u0026gt; 2600): begin = 0 end = rest.find(\u0026#34;.\u0026#34;, 2500) if (end == -1): end = rest.find(\u0026#34; \u0026#34;, 2500) textBlock = rest[begin:end] rest = rest[end:] textBlocks.append(textBlock) textBlocks.append(rest) # For each block, invoke Polly API, which transforms text into audio polly = boto3.client(\u0026#39;polly\u0026#39;) for textBlock in textBlocks: response = polly.synthesize_speech( OutputFormat=\u0026#39;mp3\u0026#39;, Text = textBlock, VoiceId = voice ) # Save the audio stream returned by Amazon Polly on Lambda\u0026#39;s temp # directory. If there are multiple text blocks, the audio stream # is combined into a single file. if \u0026#34;AudioStream\u0026#34; in response: with closing(response[\u0026#34;AudioStream\u0026#34;]) as stream: output = os.path.join(\u0026#34;/tmp/\u0026#34;, postId) if os.path.isfile(output): mode = \u0026#34;ab\u0026#34; # Append binary mode else: mode = \u0026#34;wb\u0026#34; # Write binary mode (create a new file) with open(output, mode) as file: file.write(stream.read()) s3 = boto3.client(\u0026#39;s3\u0026#39;) s3.upload_file(\u0026#39;/tmp/\u0026#39; + postId, os.environ[\u0026#39;BUCKET_NAME\u0026#39;], postId + \u0026#34;.mp3\u0026#34;) s3.put_object_acl(ACL=\u0026#39;public-read\u0026#39;, Bucket=os.environ[\u0026#39;BUCKET_NAME\u0026#39;], Key= postId + \u0026#34;.mp3\u0026#34;) location = s3.get_bucket_location(Bucket=os.environ[\u0026#39;BUCKET_NAME\u0026#39;]) region = location[\u0026#39;LocationConstraint\u0026#39;] if region is None: url_beginning = \u0026#34;https://s3.amazonaws.com/\u0026#34; else: url_beginning = \u0026#34;https://s3-\u0026#34; + str(region) + \u0026#34;.amazonaws.com/\u0026#34; url = url_beginning \\ + str(os.environ[\u0026#39;BUCKET_NAME\u0026#39;]) \\ + \u0026#34;/\u0026#34; \\ + str(postId) \\ + \u0026#34;.mp3\u0026#34; # Updating the item in DynamoDB response = table.update_item( Key={\u0026#39;id\u0026#39;:postId}, UpdateExpression= \u0026#34;SET #statusAtt = :statusValue, #urlAtt = :urlValue\u0026#34;, ExpressionAttributeValues= {\u0026#39;:statusValue\u0026#39;: \u0026#39;UPDATED\u0026#39;, \u0026#39;:urlValue\u0026#39;: url}, ExpressionAttributeNames= {\u0026#39;#statusAtt\u0026#39;: \u0026#39;status\u0026#39;, \u0026#39;#urlAtt\u0026#39;: \u0026#39;url\u0026#39;}, ) return Code explanation: This AWS Lambda function converts text stored in a DynamoDB record into an MP3 audio file using Amazon Polly. It retrieves the text and voice ID from DynamoDB using the post ID from an SNS message, then splits the text into blocks of about 2500 characters (since Polly\u0026rsquo;s API has a character limit). Each block is processed by Polly to synthesize speech, and the resulting audio is stored in a temporary file. The function then uploads the final audio file to an S3 bucket, makes it publicly accessible, and updates the DynamoDB record with the URL of the MP3 file.\nExamine the code. The Lambda function does the following:\nRetrieves the ID of the DynamoDB item (post ID) which should be converted into an audio file from the input message (SNS event) Retrieves the item from DynamoDB Converts the text into an audio stream Places the audio (MP3) file into an S3 bucket Updates the DynamoDB table with a reference to the S3 bucket and the new status The synthesize_speech method receives the text to be converted and the voice to used. In return, it provides the audio stream. The catch is that there is a size limit of 3000 characters on the text that can be provided as input. Because a post can be big, posts need to be divided into blocks of about 2500 characters, depending where the final word in the block ends. After converting the blocks into an audio stream, they are joined together again.\nChoose Deploy. Choose the Configuration tab to configure the environment variables. In the left navigation pane, choose Environment variables. In the Environment variables section, choose Choose Edit. Choose Add environment variable.\nKey: Enter DB_TABLE_NAME Value: Enter posts Choose Add environment variable.\nKey: Enter BUCKET_NAME Value: Enter the name of the bucket you created earlier. It should look similar to: audioposts-123 Choose Save. The posts to be converted can be quite big, so you need to extend the maximum time of a single code execution to 5 minutes.\nIn the General configuration section, choose Edit. Update the Timeout to 5 minutes. Choose Save. You now configure the function to trigger automatically when a message is sent to the SNS topic that you created earlier.\nIn the Triggers section, choose Add trigger and then configure: Select a source: SNS SNS topic: Select new_posts from available topics. Choose Add. You are now ready to test that the two Lambda functions communicate successfully via SNS and create a Polly audio file.\n"
},
{
	"uri": "http://Trung1616.github.io/5-cleanup/5.5-delete-amazon-api-gateway/",
	"title": "Delete Amazon API Gateway.",
	"tags": [],
	"description": "",
	"content": "Remove the API Gateway that was used to expose the Lambda functions for web access.\nAt the top of the AWS Management Console, in the search bar, search for and choose API Gateway. In the left navigation pane, choose APIs. Type confirm in the confirmation box and select Delete to delete. "
},
{
	"uri": "http://Trung1616.github.io/5-cleanup/5.6-delete-cloudformation-stack/",
	"title": "Delete CloudFormation Stack",
	"tags": [],
	"description": "",
	"content": "Delete the CloudFormation stack to avoid any unexpected charges on your AWS bill.You can delete the entire stack from the AWS CloudFormation Console. This will automatically remove all related resources in the correct order, reducing manual steps.\nAt the top of the AWS Management Console, in the search bar, search for and choose CloudFormation In the left navigation pane, choose Stacks.\nChoose stack polly-serverless-stack-ThanhTrung and choose Delete to delete. Choose Delete to delete. "
},
{
	"uri": "http://Trung1616.github.io/6-future-expansion-directions-and-references/",
	"title": "Future Expansion Directions and References",
	"tags": [],
	"description": "",
	"content": "Future Expansion Directions We can consider and expand new features for the system in the future, such as:\nEnhanced Language Support: Use additional AWS services or third-party APIs to incorporate more languages and dialects for a broader audience.\nVoice Customization: Leverage AWS Polly\u0026rsquo;s SSML (Speech Synthesis Markup Language) features to allow users to customize voice parameters like pitch and speed.\nIntegration with Other AWS Services: Connect the application with Amazon Transcribe for voice-to-text capabilities or AWS Lambda functions for additional processing tasks.\nAnalytics with Amazon CloudWatch: Implement analytics features using Amazon CloudWatch to monitor user engagement with the audio content and track performance metrics.\nUser Feedback with AWS DynamoDB: Create a feedback system where users can rate voices and submit suggestions, storing this data in DynamoDB for analysis.\nMultimedia Integration: Expand beyond text by incorporating images or video content that can enhance the listening experience.\nReferences Build your own text-to-speech applications with Amazon Polly\nWhat Is Amazon Polly?\nWhat is Amazon API Gateway?\nWhat is AWS Lambda?\n"
},
{
	"uri": "http://Trung1616.github.io/3-implementation-steps/3.6-test-the-functions/",
	"title": "Test the functions",
	"tags": [],
	"description": "",
	"content": "You now test the following workflow:\nManually trigger the New Post Lambda function It stores data in DynamoDB and send a message to the SNS topic SNS triggers the Convert To Audio function, which uses Polly to create an audio file and store it in the S3 bucket Choose Functions in the top-left corner. You might need to expand the navigation pane by choosing the menu icon.\nChoose PostReader_NewPost function. Choose Test. You should see the message: Execution result: succeeded.\nThis indicates that this function was executed. You now confirm that the other steps have also completed successfully.\nAt the top of the AWS Management Console, in the search bar, search for and choose DynamoDB. In the left navigation pane, choose Explore items. Choose posts. You should see two entries because you have run the test twice. The second execution should have also triggered the Convert to Audio Lambda function, so there is also an entry for the url.\nAt the top of the AWS Management Console, in the search bar, search for and choose Lambda. Choose the ConvertToAudio function. Choose the Monitor tab. If the Error count and success rate chart indicates that an error occurred, then you need to investigate the error:\nChoose View CloudWatch logs Choose the Log Stream shown in the list Expand the log entries to discover the error message For example, if you received the error The specified bucket does not exist, then you need to confirm that the bucket name you entered in the Environment variables matches the name of the S3 bucket you created earlier in the lab.\nIf Convert to Audio function executed successfully, there should see an MP3 file in your S3 bucket.\nAt the top of the AWS Management Console, in the search bar, search for and choose S3 Choose your audioposts- bucket. You should see an MP3 files, and you can download and listen to them. "
},
{
	"uri": "http://Trung1616.github.io/3-implementation-steps/3.7-create-a-get-post-lambda-function/",
	"title": "Create a get post Lambda function",
	"tags": [],
	"description": "",
	"content": "The final Get Post Lambda function provides a method for retrieving information about posts from the database.\nAt the top of the AWS Management Console, in the search bar, search for and choose Lambda. Choose Create function. Choose Author from scratch and use the following settings: Function name: PostReader_GetPost Runtime: Python 3.12 Expand Change default execution role Execution role: Choose Use an existing role Existing role: Choose Lab-Lambda-Role Scroll down and choose Create function. Command: Delete the existing code and paste the following code: import boto3 import os from boto3.dynamodb.conditions import Key, Attr def lambda_handler(event, context): postId = event[\u0026#34;postId\u0026#34;] dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) if postId==\u0026#34;*\u0026#34;: items = table.scan() else: items = table.query( KeyConditionExpression=Key(\u0026#39;id\u0026#39;).eq(postId) ) return items[\u0026#34;Items\u0026#34;] Code explanation: This AWS Lambda function retrieves records from a DynamoDB table. It uses a postId from the event input to determine which records to fetch. If postId equals \u0026ldquo;*\u0026rdquo;, it fetches all items from the table using the scan() method. Otherwise, it queries for a specific item by matching the id field with postId. The function returns the list of retrieved items.\nChoose Deploy Again, you need to provide the name of the DynamoDB table as an Environment variable for the function.\nChoose the Configuration tab to configure the environment variables. In the left navigation pane, choose Environment variables. In the Environment variables section, choose Edit. Choose Add environment variable. Key: Enter DB_TABLE_NAME Value: Enter posts Choose Save. You can now test the function!\nIn the Test tab, create your test event using the following parameters: Event name AllPosts Command: Replace the existing code with the following code: { \u0026#34;postId\u0026#34;: \u0026#34;*\u0026#34; } Choose Save. Choose Test to run the test event. You should see the message: Execution result: succeeded\nIf you expand the Details section you should see a list of all records from the DynamoDB table.\n"
},
{
	"uri": "http://Trung1616.github.io/3-implementation-steps/3.8-expose-the-lambda-function-as-a-restful-web-service/",
	"title": "Expose the Lambda function as a RESTful web service",
	"tags": [],
	"description": "",
	"content": "The last thing you need to do is expose the application logic as a RESTful web service so it can be invoked easily using a standard HTTP protocol. To do this, you use Amazon API Gateway.\nAt the top of the AWS Management Console, in the search bar, search for and choose API Gateway. In the Rest API panel, choose Build. In the Create REST API section, for API details section, use the following parameters:\nChoose New API API name: PostReaderAPI Description: API for PostReader Application Endpoint Type: Regional Choose Create API. After the API is created, you need to create two HTTP methods.\nYou start by configuring the POST method to invoke the PostReader_NewPost Lambda function.\nIn the Methods pane, choose Create method. For Method type, choose POST. For Lambda Function, choose that function that contains PostReader_NewPost in its name. Choose Create method. For the GET method, the API invokes the PostReader_GetPost Lambda function.\nIn the Resources pane, choose the / icon above POST. In the Methods pane, choose Create method. For Method type, choose GET. For Lambda Function, choose that function that contains PostReader_GetPost in its name. Choose Create method. The last method to configure is for CORS (Cross-Origin Resource Sharing). This method enables invoking the API from a website with a different hostname.\nIn the Resources pane, choose the / icon above GET. In the Resource details pane, choose Enable CORS. For Gateway responses, choose Default 4XX and Default 5XX. For Access-Control-Allow-Methods, choose GET and POST. Choose Save. After completing these steps, you\u0026rsquo;ll see a notification confirming that CORS has been enabled successfully.\nYou now configure the GET method for a query parameter, postId, which provides information about the id of the post that should be returned.\nChoose the GET method. In the Method request settings pane, choose Edit. Expand the URL query string parameters section. Choose Add query string. For Name, enter postId. Choose Save. The PostReader_GetPost Lambda function expects to receive input data in JSON format, so the API needs to be configured to map the parameter into this format. To do this, you can add mapping to the Integration Request configuration.\nChoose the Integration request tab.\nIn the Integration requests settings pane, choose Edit. For Request body passthrough, choose When there are no templates defined (recommended).\nExpand Mapping templates.\nChoose Add mapping template.\nFor Content type, enter application/json.\nFor Template body, enter: { \u0026#34;postId\u0026#34; : \u0026#34;$input.params(\u0026#39;postId\u0026#39;)\u0026#34; }\nChoose Save. The API is ready to deploy!\nChoose Deploy API. Stage: Choose New Stage Stage name: Dev Choose Deploy Copy the Invoke URL value and save it in a text editor for later use. Note: The URL is used later to interact with the application.\n"
},
{
	"uri": "http://Trung1616.github.io/3-implementation-steps/3.9-create-a-serverless-user-interface/",
	"title": "Create a Serverless User Interface",
	"tags": [],
	"description": "",
	"content": "Although the application is fully operational, it is only exposed as a RESTful web service. You now deploy a small web page on Amazon S3, which is a great choice for hosting static web pages. This web page uses JavaScript to connect to the API and provide text-to-speech functionalities in a web page.\nDownload these files to your computer, use mouse right click and \u0026ldquo;Save Link As\u0026hellip;\u0026rdquo;. index.html scripts.js styles.css If you cannot download the above files, you can access them here: Download\nNote: Ensure that each file keeps the same filename, including the extension.\nEdit your scripts.js file with a Text Editor, replacing YOUR_API_GATEWAY_ENDPOINT (on the first line) with the Invoke URL you copied earlier. Expected output:\nvar API_ENDPOINT = \u0026#34;https://xxxxx.execute-api.us-west-2.amazonaws.com/Dev\u0026#34; You now upload these files to an Amazon S3 bucket.\nAt the top of the AWS Management Console, in the search bar, search for and choose S3. Choose Create bucket and configure the following details: Bucket name: www-BUCKET Replace BUCKET with the name of your audioposts bucket Copy the name of your bucket to your text editor. You use the bucket name later. You change the bucket\u0026rsquo;s permissions so that the website is accessible to everybody. Under Object Ownership, choose ACLs enabled Under Block Public Access settings for this bucket deselect the Block all public access option, and then leave all other options deselected. Note: Notice all of the individual options remain deselected. When deselecting all public access, you must then select the individual options that apply to your situation and security objectives. In a production environment, it is recommended to use the least permissive settings possible.\nA warning box appears saying that: Turning off block all public access might result in this bucket and the objects within becoming public. AWS recommends that you turn on block all public access, unless public access is required for specific and verified use cases such as static website hosting.\nSelect the check box next to I acknowledge that the current settings might result in this bucket and the objects within becoming public. Choose Create bucket After completing these steps, you will see a message confirming that the bucket has been successfully created\nAfter the bucket has been created, select it from the bucket list and upload the three files to your new www bucket. Note: The files must be named: index.html, scripts.js and styles.css\nOn the bucket page, select the Permissions tab at the top. Scroll down to the Bucket Policy section and choose the Edit button. Paste this policy into the editor: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:GetObject\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3:::www-BUCKET/*\u0026#34; ] } ] } Replace www-BUCKET with the name of your www-audioposts bucket. Choose Save changes. WARNING: If you receive an error that Policy has invalid resource, confirm that you have edited the Resource line to match the name of your bucket.\nNote: You can ignore the warning that This bucket has public access. This is intentional.\nFinally, you activate static website hosting, which makes the bucket operate like a static website. Choose the Properties tab. Ignore the AWS CloudTrail Permission error. Scroll down to the Static website hosting section and choose Edit. Choose Enable for Static website hosting. Index document: index.html Error document: index.html Note: For now we are using the index.html file as error document.\nChoose Save changes. Copy the Endpoint URL to your clipboard. And that\u0026rsquo;s it! You can now check if the website is working. Open a new web browser tab and paste the Endpoint URL that you just copied. You should see a page that looks like this: If you write something in the text area and choose Say it, the event is sent to your application. The application asynchronously converts the text into an audio file. Depending on the size of the text you provide, it can take a couple of seconds or a couple of minutes to convert it to an audio file.\nTo view the posts and their audio files, type the post ID or * in the Search box:\nPlay button to hear the audio. You can see how the system operates in the video below:\nAt this point, you have successfully built a serverless text-to-speech application using Amazon Polly.\n"
},
{
	"uri": "http://Trung1616.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://Trung1616.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]